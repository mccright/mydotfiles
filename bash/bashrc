# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Source proxy configuration
if [ -f ~/.proxyrc ]; then
        . ~/.proxyrc
fi

# show the current disk space
/bin/df -P -k
#

export TZ=America/Chicago
export LINESEPARATOR='- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Replace 'TeamName' below with your team name:
if [ -f /bin/toilet ]; then
    toilet -f pagga '                  TeamName'
else
    echo "Install toilet! Use: sudo apt install toilet"
fi

# Set up Java Home if java jdk is installed
if [ -f /usr/lib/jvm/java-11-openjdk-amd64/bin/javac ]; then
    export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/
    echo "openJDK is installed"
        java --version
        echo $LINESEPARATOR
else
    echo "You must install openJDK. Use: sudo apt install openjdk-11-jdk"
fi

# Expand $PATH to include the directory
# where Java applications are installed.
java_bin_path="/usr/lib/jvm/java-11-openjdk-amd64/bin/"
if [ -n "${PATH##*${java_bin_path}}" -a -n "${PATH##*${java_bin_path}:*}" ]; then
    export PATH=$PATH:${java_bin_path}
fi

# Set up Java Home if java is installed
if [ -f /usr/lib/jvm/java-11-openjdk-amd64/bin/java  ]; then
    echo "openJDK jre is available"
        # java --version
        # echo '- - - - - - - - - -'
        echo $LINESEPARATOR
else
    echo "I didn't find the openJDK jre. There is a problem."
        echo "Use: sudo apt install openjdk-11-jdk"
fi

# Give Java a situation-required amt of RAM - May need updating
export JAVA_OPTS="-Xmx2048m"
# If in a proxy-protected network, use the approach below:
#export JAVA_OPTS="-Xmx2048m -Dhttp.proxyHost=<proxyDNSname> -Dhttp.proxyPort=<port> -Dhttps.proxyHost=<proxyIPaddr> -Dhttps.proxyPort=<port> -Dhttps.proxyPassword=<passwd> -Dhttps.proxyUser=<user> -Dhttp.proxyPassword=<passwd> -Dhttp.proxyUser=<user>"

# Expand $PATH to include the directory
# where Maven applications are installed.
maven_bin_path="/usr/share/maven/bin/"
if [ -n "${PATH##*${maven_bin_path}}" -a -n "${PATH##*${maven_bin_path}:*}" ]; then
    export PATH=$PATH:${maven_bin_path}
fi

# Set up Maven Home if Maven is installed
if [ -f /usr/share/maven/bin/mvn  ]; then
        echo "Maven is installed"
    export MAVEN_HOME=/usr/share/maven
    export M2_HOME=/usr/share/maven-repo
        mvn --version
        echo $LINESEPARATOR
else
    echo "You must install maven. Use: sudo apt install maven"
    echo "see: https://linuxize.com/post/how-to-install-apache-maven-on-ubuntu-20-04/"
fi

if [ -f /etc/profile.d/maven.sh ]; then
    . /etc/profile.d/maven.sh
fi


if [ -f /etc/profile.d/gradle.sh ]; then
    . /etc/profile.d/gradle.sh
        echo "Gradle is installed"
        gradle --version 2>/dev/null
else
    echo "You must install gradle. Use: sudo apt install gradle"
    echo "see: https://linuxize.com/post/how-to-install-gradle-on-ubuntu-20-04/"
fi

# Ensure mono is installed
# I use some applications that depend on it
if [ -f /usr/bin/mono  ]; then
        echo "Mono is installed"
        echo $LINESEPARATOR
else
    echo "You must install mono. Use: sudo apt install --upgrade mono-complete"
fi

# I do a lot of static code security analysis...
# Expand $PATH to include the directory
# where Fortify ScanCentral applications are installed.
cloudscan_bin_path="$HOME/fortify/cloudscan/bin/"
if [ -n "${PATH##*${cloudscan_bin_path}}" -a -n "${PATH##*${cloudscan_bin_path}:*}" ]; then
    export PATH=$PATH:${cloudscan_bin_path}
fi

# if you normally do `set -o vi',
echo "set editing-mode vi" > ~/inputrc
# When performing tab completion, a single tab attempts to partially complete the current word.
# If no partial completions are possible, a double tab shows all possible completions.
# The double tab can be changed to a single tab by setting
echo "set show-all-if-unmodified on" >> ~/inputrc
export INPUTRC=~/inputrc
export EDITOR=`which vim`

# Source set definitions
if [ -f ~/inputrc ]; then
    . ~/inputrc
fi

# Describe the current OS
if [ -f ~/bin/current-os.sh ]; then
    . ~/bin/current-os.sh
fi

# This is to support pipenv
# https://github.com/pypa/pipenv
eval "$(_PIPENV_COMPLETE=bash_source pipenv)"

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
# Enlarge the history length
HISTSIZE=10000
HISTFILESIZE=20000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='\W\[e[1;31m\] >> \[\e[m\]'
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\W\[\e[1;31m\] Â» \[\e[m\]"
    ;;
*)
    ;;
esac

# set some color-supporting environment variables
if [ -x ~/bin/terminal_colors.sh ]; then
    source ~/bin/terminal_colors.sh
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'
    # make grep show hits in color
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Alias definitions.
# I put most of my aliases into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# finally show the hostname and do the greeter
if [ -f /usr/bin/figlet ]; then
    /usr/bin/figlet `(hostname)`
fi

# cowsay greeter from https://github.com/jaesivsm/dotfiles/blob/master/files/bash/bashrc
# I got tired of the animals for now and just go with fortunes
if [ -x "/usr/games/cowsay" ] && [ -x "/usr/games/fortune" ] && [ -d "$HOME/cows" ]; then
    # /usr/games/cowsay -f ~/.cows/$(/bin/ls ~/.cows -1 | head -n $(expr $$$(date +%s) % $(/bin/ls ~/.cows | wc -w) + 1) | tail -n 1) "$(/usr/games/fortune -a)"
    /usr/games/fortune -a
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
